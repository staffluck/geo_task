version: '3.8'

services:
  api:
    container_name: geo.api
    profiles:
      - "api"
    build:
      context: .
    restart: unless-stopped
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      - db
    volumes:
      - ./:/app
    command: [ "python", "-m", "src" ]

  db:
    image: postgis/postgis:15-3.3
    container_name: geo.db
    hostname: geo.db
    profiles:
      - "api"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    networks:
      - geo.db.network

  loki:
    profiles:
      - "grafana"
    image: grafana/loki:2.7.3
    expose:
      - "3100"
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - geo.grafana.network

  promtail:
    profiles:
      - "grafana"
    image: grafana/promtail:2.7.3
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - geo.grafana.network

  grafana:
    profiles:
      - "grafana"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - geo.grafana.network

volumes:

  postgres_data:

  redis_data:


networks:
  geo.db.network: {}
  geo.grafana.network: {}
